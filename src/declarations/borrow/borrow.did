type TxReceipt = 
 variant {
   err: text;
   ok: nat;
 };
type Time = int;
type LoanDetail = 
 record {
   borrower: principal;
   id: nat;
 };
type DepositType = 
 record {
   amount: nat;
   borrow: nat;
   isActive: bool;
   isAllowWithdraw: bool;
   isUsing: bool;
   reserve0: nat;
   reserve1: nat;
   startTime: Time;
   tokenIdBorrow: principal;
 };
type Borrow = 
 service {
   borrow: (nat, principal) -> (text);
   checkRemoveLP: (vec principal) -> (vec nat);
   checkRemoveLP_2: (principal) -> (vec float64);
   deposit: (nat) -> (text);
   getAvaiableToBorrow: (nat) -> (vec nat);
   getDepositId: () -> (opt DepositType);
   getDepositIdPerUser: (principal) -> (opt DepositType);
   getHealthRaito: (principal) -> (float64);
   getLoanDetail: (nat) -> (opt LoanDetail);
   getPairInfo: (nat) -> (vec nat);
   getPairInfoPrincipal: (nat) -> (vec text);
   getReserves: () -> (vec nat);
   getTokenBalance: (principal, principal) -> (Balance);
   getTokenDecimals: (principal) -> (nat8);
   getloanId: () -> (nat);
   rePay: () -> (text);
   totalSupply_call: (text) -> (nat);
   user: () -> (text);
   withdraw: (nat) -> (text);
   withdrawTokenFromSwap: (principal, nat) -> (TxReceipt);
 };
type Balance = nat;
service : (principal, principal, text, principal, principal) -> Borrow
